% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/component.R
\docType{class}
\name{Component-class}
\alias{Component-class}
\alias{Component}
\title{Abstract class for a component. Provides basic functions
 like logging, working with environment and error handling}
\description{
Abstract class for a component. Provides basic functions
 like logging, working with environment and error handling
}
\section{Methods}{

\describe{
\item{\code{empty(obj)}}{Verify that a value is empty
\subsection{Parameters}{\itemize{
\item{\code{obj} Character or number or vector of those.}
}}
\subsection{Return Value}{TRUE if the value is empty (array or string)}}

\item{\code{getEnv(name)}}{Get system environment variable
\subsection{Parameters}{\itemize{
\item{\code{name} Name of the environment variable.}
}}
\subsection{Return Value}{Value of the environment variable or null if it does not exist.}}

\item{\code{initialize(debugMode = FALSE)}}{Constructor.
\subsection{Parameters}{\itemize{
\item{\code{debugMode} Set higher logging level so that debug messages are printed.}
}}}

\item{\code{logDebug(obj)}}{Log a debugging message.
\subsection{Parameters}{\itemize{
\item{\code{obj} Arbitrary message or printable object.}
}}
\subsection{Return Value}{NULL}}

\item{\code{logError(obj)}}{Log an error message.
\subsection{Parameters}{\itemize{
\item{\code{obj} Arbitrary message or printable object.}
}}
\subsection{Return Value}{NULL}}

\item{\code{logInfo(obj)}}{Log an informational message.
\subsection{Parameters}{\itemize{
\item{\code{obj} Arbitrary message or printable object.}
}}
\subsection{Return Value}{NULL}}

\item{\code{logWarning(obj)}}{Log a warning message.
\subsection{Parameters}{\itemize{
\item{\code{obj} Arbitrary message or printable object.}
}}
\subsection{Return Value}{NULL}}

\item{\code{printLog(msg, mode = "stdout")}}{Helper function to print timestamp with each message.
\subsection{Parameters}{\itemize{
\item{\code{msg} Arbitrary message or printable object.}
\item{\code{mode} Logging mode either \code{stdout} or \code{stderr}.}
}}
\subsection{Return Value}{NULL}}

\item{\code{setDebugMode(debugMode)}}{Change debugging mode.
\subsection{Parameters}{\itemize{
\item{\code{debugMode} TRUE to turn debugging on.}
}}
\subsection{Return Value}{New debugMode}}

\item{\code{splitString(string, splitChar, asLogical = FALSE)}}{Split a string by a specificed split character.
\subsection{Parameters}{\itemize{
\item{\code{string} Arbitrary string.}
\item{\code{splitChar} Split character.}
\item{\code{asLogical} If \code{TRUE} than a vector of TRUEs indexed by token name will be returned
if \code{FALSE} (default) then a vector of tokens will be returned.}
}}
\subsection{Return Value}{Vector of tokens}}

\item{\code{wrapTryCatch(expr, silentSuccess = FALSE, stopIsFatal = TRUE)}}{Error handling wrapper which prints Java like stack trace in case of error.
Comes from http://stackoverflow.com/a/24884348/41640
\subsection{Parameters}{\itemize{
\item{\code{expr} An expression to execute.}
\item{\code{silentSuccess} In case of success, do not print any messages.}
\item{\code{stopIsFatal} In case of error, do stop the script execution.}
}}
\subsection{Return Value}{NULL}}
}}

