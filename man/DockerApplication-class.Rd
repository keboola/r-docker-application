% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keboola.r.docker.application.R
\docType{class}
\name{DockerApplication-class}
\alias{DockerApplication}
\alias{DockerApplication-class}
\title{Application which serves as a backend for component which runs 
 inside Docker with interface to docker-bundle.}
\description{
Application which serves as a backend for component which runs 
 inside Docker with interface to docker-bundle.
}
\section{Methods}{

\describe{
\item{\code{getExpectedOutputFiles()}}{Get files which are supposed to be returned when the application finishes.
\subsection{Return Value}{data.frame with output files}}

\item{\code{getExpectedOutputTables()}}{Get tables which are supposed to be returned when the application finishes.
\subsection{Return Value}{data.frame with expected output tables.}}

\item{\code{getFileManifest(fileName)}}{Get additional file information stored in file manifest.
\subsection{Parameters}{\itemize{
\item{\code{fileName} Destination file name (without .manifest extension).}
}}
\subsection{Return Value}{List with manifest options}}

\item{\code{getInputFiles()}}{Get names of input files. Returns fully classified pathnames.
\subsection{Return Value}{List with file names}}

\item{\code{getInputTables()}}{Get input tables specified in the configuration file. Tables are identified by
their destination (.csv file) or full_path.
\subsection{Return Value}{data.frame with output tables}}

\item{\code{getParameters()}}{Get arbitrary parameters specified in the configuration file.
\subsection{Return Value}{List with parameters}}

\item{\code{getTableManifest(tableName)}}{Get additional table information stored in table manifest.
\subsection{Parameters}{\itemize{
\item{\code{tableName} Destination table name (name of .csv file).}
}}
\subsection{Return Value}{List with manifest options}}

\item{\code{initialize(debugMode = FALSE)}}{Constructor.
\subsection{Parameters}{\itemize{
\item{\code{debugMode} Set higher logging level so that debug messages are printed.}
}}}

\item{\code{readConfig()}}{Read configuration file.
List with parsed configuration file structure is accessible as configData property.
\subsection{Return Value}{TRUE}}

\item{\code{writeFileManifest(fileName, fileTags = vector(), isPublic = FALSE,
  isPermanent = TRUE, notify = FALSE)}}{Write manifest for output file. Manifest is used for the file to be stored in KBC Storage.
List with parsed configuration file structure is accessible as configData property.
\subsection{Parameters}{\itemize{
\item{\code{fileName} Local file name of the file to be stored, including path.}
\item{\code{fileTags} Vector of file tags.}
\item{\code{isPublic} Logical true if the file should be stored as public.}
\item{\code{isPermananet} Logical false if the file should be stored only temporarily (for days)
otherwise it will be stored until deleted.}
\item{\code{notify} Logical TRUE if members of the project should be notified about the file upload.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{writeTableManifest(fileName, destination, primaryKey = vector())}}{Write manifest for output table Manifest is used for the table to be stored in KBC Storage.
\subsection{Parameters}{\itemize{
\item{\code{fileName} Local file name of the CSV with table data.}
\item{\code{destination} String name of the table in Storage.}
\item{\code{primaryKey} Vector of columns used for primary key.}
}}
\subsection{Return Value}{TRUE}}
}}

